JOIN Teams top ON top.TeamID = mso.TeamID
JOIN Matches m ON ms.MatchID = m.MatchID AND m.Season > 2001
JOIN Bets b ON b.MatchID = ms.MatchID AND CompanyCode = \"B365\"
WHERE l.League = \"SP\"
ORDER BY m.Season, t.TeamName, m.MatchDate")
match.data = fetch(result, n=-1)
# Building a function to clean the data in the way that I want for the regression
data.cleanup <- function(match.data, nmatches, nteams){
# Defining home and away variables
match.data$HomeAway <- ifelse(match.data$HomeAway == "H", 1, 0)
# Win vs loss or draw variables
match.data$Result[(match.data$Result == "H" & match.data$HomeAway == 1) |
(match.data$Result == "A" & match.data$HomeAway == 0)] <- 2
match.data$Result[(match.data$Result == "H" & match.data$HomeAway != 1) |
(match.data$Result == "A" & match.data$HomeAway != 0)] <- 0
match.data$Result[match.data$Result == "D"] <- 1
match.data$Result <- as.numeric(match.data$Result)
# Odds for winning vs. drawing vs. losing
match.data$WinOdds <- ifelse(match.data$HomeAway == 1, match.data$HomeWinOdds,
match.data$AwayWinOdds)
match.data$LoseOdds <- ifelse(match.data$HomeAway == 1, match.data$AwayWinOdds,
match.data$HomeWinOdds)
# Getting league position BEFORE each match - and the position in the table before each match
Seasons <- unique(match.data$Season)
TotalPoints <- rep(0,nrow(match.data))
for(i in 1:nrow(match.data)){
if((i-1) %% nmatches == 0){
TotalPoints[i] <- 0
Tstart <- i
} else {
TotalPoints[i] <- sum(match.data$LeaguePoints[Tstart:(i-1)])
}
}
match.data$PointsBefore <- TotalPoints
match.data$PositionBefore <- rep(0,nrow(match.data))
for(j in 1:length(Seasons)){
for(i in 1:nmatches){
match.data$PositionBefore[c((nmatches*nteams*(j-1)+i)+(0:(nteams-1))*nmatches)] <-
rank(-(match.data$PointsBefore[c((nmatches*nteams*(j-1)+i)+(0:(nteams-1))*nmatches)]),
ties.method = "min")
}
}
# Creating positions "last season". For this, should need to input
match.data$PrevSeas <- rep(0,nrow(match.data))
for(j in 1:(length(Seasons)-1)){
a <- rank(-(match.data$PointsBefore[c((nmatches*nteams*(j-1)+nmatches)+(0:(nteams-1))*nmatches)] +
match.data$LeaguePoints[c((nmatches*nteams*(j-1)+nmatches)+(0:(nteams-1))*nmatches)]),
ties.method = "min")
prevteams <- unique(match.data$Team[match.data$Season == Seasons[j]])
for(i in 1:(nteams-1)){
if(j != 99){
match.data$PrevSeas[match.data$Team == prevteams[i] & match.data$Season == Seasons[(j+1)]] <- a[i]
}
}
}
# Adding data of opposition team
OPTeam <- match.data$Opposition
Date <- match.data$MatchDate
match.data$OP.PositionBefore <- rep(0,nrow(match.data))
match.data$OP.PrevSeas <- rep(0,nrow(match.data))
for(i in 1:length(OPTeam)){
match.data$OP.PositionBefore[i] <- match.data$PositionBefore[match.data$Team == OPTeam[i] &
match.data$MatchDate == Date[i]]
match.data$OP.PrevSeas[i] <- match.data$PrevSeas[match.data$Team == OPTeam[i] &
match.data$MatchDate == Date[i]]
}
# Adding goals for and coals conceded
start <- seq(1,nrow(match.data),nmatches)
match.data$GoalsFor <- as.numeric(sapply(start,function(i) {
sapply(seq(i,(i+nmatches - 1)), function(j) {
sum(match.data$Goals[i:j])
})
}))
match.data$GoalsAgainst <- as.numeric(sapply(start,function(i) {
sapply(seq(i,(i+nmatches - 1)), function(j) {
sum(match.data$GoalsConceded[i:j])
})
}))
match.data$GoalDifference <- match.data$GoalsFor - match.data$GoalsAgainst
match.data$GFS <- (match.data$GoalsFor)^2
match.data$GAS <- (match.data$GoalsAgainst)^2
match.data$GDS <- (match.data$GoalDifference)^2
# Developing classification of team positions -> should be changed for different leagues
top3 <- c(1,2,3)
top6 <- c(4,5,6,7)
midtable <- c(8:12)
lowtable <- c(13:16)
relegation <- c(17:20)
match.data$ClassBefore[match.data$PositionBefore %in% top3] <- "Top3"
match.data$ClassBefore[match.data$PositionBefore %in% top6] <- "Top6"
match.data$ClassBefore[match.data$PositionBefore %in% midtable] <- "MidTable"
match.data$ClassBefore[match.data$PositionBefore %in% lowtable] <- "MidTable"
match.data$ClassBefore[match.data$PositionBefore %in% relegation] <- "MidTable"
match.data$PrevClass[match.data$PrevSeas %in% top3] <- "Top3"
match.data$PrevClass[match.data$PrevSeas %in% top6] <- "Top6"
match.data$PrevClass[match.data$PrevSeas %in% midtable] <- "MidTable"
match.data$PrevClass[match.data$PrevSeas %in% c(13:17)] <- "MidTable"
match.data$PrevClass[match.data$PrevSeas == 0] <- "Promoted"
# And opposition teams
match.data$OP.ClassBefore[match.data$OP.PositionBefore %in% top3] <- "Top3"
match.data$OP.ClassBefore[match.data$OP.PositionBefore %in% top6] <- "Top6"
match.data$OP.ClassBefore[match.data$OP.PositionBefore %in% midtable] <- "MidTable"
match.data$OP.ClassBefore[match.data$OP.PositionBefore %in% lowtable] <- "MidTable"
match.data$OP.ClassBefore[match.data$OP.PositionBefore %in% relegation] <- "MidTable"
match.data$OP.PrevClass[match.data$OP.PrevSeas %in% top3] <- "Top3"
match.data$OP.PrevClass[match.data$OP.PrevSeas %in% top6] <- "Top6"
match.data$OP.PrevClass[match.data$OP.PrevSeas %in% midtable] <- "MidTable"
match.data$OP.PrevClass[match.data$OP.PrevSeas %in% c(13:17)] <- "MidTable"
match.data$OP.PrevClass[match.data$OP.PrevSeas == 0] <- "Promoted"
return(match.data)
}
n <- 38
nt <- length(unique(match.data$Team[match.data$Season == 2003]))
match.data <- data.cleanup(match.data, n, nt)
### Sample Creation ###
z <- match.data[c(1,4,16,17,14,15,8,6,7,23:32)]
z <- z[!is.na(z$WinOdds),]
z$GLMwin <- ifelse(z$Result == 2,1,0)
z$GLMlose <- ifelse(z$Result == 0,1,0)
z$GLMdraw <- ifelse(z$Result == 1,1,0)
z$ClassBefore <- factor(z$ClassBefore, levels = c("MidTable","Top6","Top3"), ordered = T)
z$PrevClass <- factor(z$PrevClass, levels = c("Promoted","MidTable","Top6","Top3"), ordered = T)
z$OP.ClassBefore <- factor(z$OP.ClassBefore, levels = c("MidTable","Top6","Top3"), ordered = T)
z$OP.PrevClass <- factor(z$OP.PrevClass, levels = c("Promoted","MidTable","Top6","Top3"), ordered = T)
subs <- sub.select(4,n, nt)
train <- z[subs,]
test <- z[-subs,]
### Odd regressions ###
# Transforming to pseudo probabilities
train$WinOdds <- 1/train$WinOdds
train$LoseOdds <- 1/train$LoseOdds
train$DrawOdds <- 1/train$DrawOdds
test$WinOdds <- 1/test$WinOdds
test$LoseOdds <- 1/test$LoseOdds
test$DrawOdds <- 1/test$DrawOdds
# With a linear model
lin.mod.w <- lm(WinOdds ~ HomeAway  + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass,data=train)
lin.mod.l <- lm(LoseOdds ~ HomeAway  + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass,data=train)
lin.mod.d <- lm(DrawOdds ~ HomeAway  + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass,data=train)
# Beta model
beta.mod.w <- betareg(WinOdds ~ HomeAway + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass,data=train)
beta.mod.l <- betareg(LoseOdds ~ HomeAway + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass,data=train)
beta.mod.d <- betareg(DrawOdds ~ HomeAway + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass,data=train)
# Predicting based on test set
lin.pred.w <- predict(lin.mod.w,test, type="response")
lin.pred.l <- predict(lin.mod.l,test, type="response")
lin.pred.d <- predict(lin.mod.d,test, type="response")
beta.pred.w <- predict(beta.mod.w,test, type="response")
beta.pred.l <- predict(beta.mod.l,test, type="response")
beta.pred.d <- predict(beta.mod.d,test, type="response")
### Match prediction ###
mod.win <-  glm(GLMwin ~ HomeAway  + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass
+ GoalsFor + GoalsAgainst + GFS + GAS,
family = binomial(),data = train)
mod.lose <- glm(GLMlose ~ HomeAway  + ClassBefore + OP.ClassBefore + PrevClass + OP.PrevClass
+ GoalsFor + GoalsAgainst + GFS + GAS,
family = binomial(),data = train)
train$WinMod <- predict(mod.win, train, type = "response")
train$LoseMod <- predict(mod.lose, train, type = "response")
test$WinMod <- predict(mod.win, test, type = "response")
test$LoseMod <- predict(mod.lose, test, type = "response")
mod.draw <- glm(GLMdraw ~ WinMod + LoseMod, family = binomial(), data = train)
# Predicting test set
pred.win <- predict(mod.win, test, type = "response")
pred.lose <- predict(mod.lose, test, type = "response")
pred.draw <- predict(mod.draw, test, type = "response")
# Thresholding the different values to determine which result we have
win.predict <- ifelse(pred.win > 0.35,1,0)
lose.predict <- ifelse(pred.lose > 0.3,1,0)
# For draws, want to use a threshold to determine probability for a draw as well
draw.predict <- ifelse(win.predict == lose.predict,
ifelse(pred.draw > 0.28,1,0),
0)
win.predict <- ifelse(win.predict == lose.predict &
lose.predict == draw.predict &
pred.win > pred.lose,
win.predict + 1,
win.predict + 0)
lose.predict <- ifelse(win.predict == lose.predict &
lose.predict == draw.predict &
pred.win < pred.lose,
lose.predict + 1,
lose.predict + 0)
# Getting the successes - can be removed, was kept even though redundant just to evaluate shortcomings better
win.pred.succ <- ifelse(win.predict == test$GLMwin,1,0)
lose.pred.succ <- ifelse(lose.predict == test$GLMlose,1,0)
draw.pred.succ <- ifelse(draw.predict == test$GLMdraw,1,0)
# Putting the actual predicted result into a single column
predicted.result <- ifelse(win.predict == 1,2,ifelse(draw.predict == 1,1,0))
predicted.succ <- ifelse(predicted.result == test$Result,1,0)
# Plotting the coefficients
beta.win <- coef(beta.mod.w)
beta.lose <- coef(beta.mod.l)
beta.draw <- coef(beta.mod.d)
pred.win <- coef(mod.win)
pred.lose <- coef(mod.lose)
pred.draw <- coef(mod.draw)
setwd("/Users/ainalopez/Desktop")
png("web/betcoeffgraph.png", width = 650)
plot(beta.win,col="green",xaxt="n", xlab="Coefficients", ylab="value", ylim=c(-1.5,1.5),
main = "Beta Regression Betting Odds")
points(beta.lose,col="red")
points(beta.draw,col="blue")
axis(1,at=1:13,labels = names(beta.win),cex.axis=0.6)
dev.off()
setwd("/Users/ainalopez/Desktop/bgse-dashboard-project/")
png("web/betcoeffgraph2.png", width = 650)
plot(beta.win,col="green",xaxt="n", xlab="Coefficients", ylab="value", ylim=c(-1.5,1.5),
main = "Beta Regression Betting Odds")
points(beta.lose,col="red")
points(beta.draw,col="blue")
axis(1,at=1:13,labels = names(beta.win),cex.axis=0.6)
dev.off()
library(RMySQL)
library(dplyr)
library(ggplot2)
library(rjags)
library(coda)
install.packages("dplyr")
library(RMySQL)
library(dplyr)
library(ggplot2)
install.packages("rjags")
library(rjags)
library(rjags)
library(coda)
# connection to SQL
db = dbConnect(MySQL(), user='root', password='' , dbname='Project', host='localhost')
# import data
result = dbSendQuery(db, "select * from (select th.TeamName as HomeTeam,
ta.TeamName as AwayTeam,
m.Result,
m.MatchID,
m.MatchDate,
l.Country,
msh.FullTimeGoals as HomeGoals,
msa.FullTimeGoals as AwayGoals
FROM Matches m JOIN Leagues l ON m.LeagueID = l.LeagueID
JOIN Teams th ON m.HomeTeamID = th.TeamID
JOIN Teams ta ON m.AwayTeamID = ta.TeamID
JOIN MatchStat msh ON m.MatchID = msh.MatchID AND msh.HomeAway = 'H'
JOIN MatchStat msa ON m.MatchID = msa.MatchID AND msa.HomeAway = 'A'
Where msh.FullTimeGoals is not null
and msa.FullTimeGoals is not null)
as ttt
order by ttt.MatchID;")
relations = fetch(result, n=100000000000)
# adding columns of numeric outcome and seasons
or <- na.omit(relations)
or$Outcome <- sign(or$HomeGoals - or$AwayGoals)
or$Season <- format(as.Date(or$MatchDate, "%Y-%m-%d"), format="%Y")
# separating countries
Countries <- unique(or$Country)
# subset England, participation by season
en <- subset(or, or$Country == Countries[3])
en <- en[order(en$Season),]
Teams <- unique(c(en$HomeTeam, en$AwayTeam))
Seasons <- unique(format(as.Date(en$MatchDate, "%Y-%m-%d"), format="%Y"))
png("web/participation_by_season.png")
qplot(Season, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
dev.off
png("web/participation_by_season.png",width = 650)
qplot(Season, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
dev.off
install.packages("rjags")
library(rjags)
db = dbConnect(MySQL(), user='root', password='' , dbname='Project', host='localhost')
# import data
result = dbSendQuery(db, "select * from (select th.TeamName as HomeTeam,
ta.TeamName as AwayTeam,
m.Result,
m.MatchID,
m.MatchDate,
l.Country,
msh.FullTimeGoals as HomeGoals,
msa.FullTimeGoals as AwayGoals
FROM Matches m JOIN Leagues l ON m.LeagueID = l.LeagueID
JOIN Teams th ON m.HomeTeamID = th.TeamID
JOIN Teams ta ON m.AwayTeamID = ta.TeamID
JOIN MatchStat msh ON m.MatchID = msh.MatchID AND msh.HomeAway = 'H'
JOIN MatchStat msa ON m.MatchID = msa.MatchID AND msa.HomeAway = 'A'
Where msh.FullTimeGoals is not null
and msa.FullTimeGoals is not null)
as ttt
order by ttt.MatchID;")
relations = fetch(result, n=100000000000)
# adding columns of numeric outcome and seasons
or <- na.omit(relations)
or$Outcome <- sign(or$HomeGoals - or$AwayGoals)
or$Season <- format(as.Date(or$MatchDate, "%Y-%m-%d"), format="%Y")
# separating countries
Countries <- unique(or$Country)
# subset England, participation by season
en <- subset(or, or$Country == Countries[3])
en <- en[order(en$Season),]
Teams <- unique(c(en$HomeTeam, en$AwayTeam))
Seasons <- unique(format(as.Date(en$MatchDate, "%Y-%m-%d"), format="%Y"))
png("web/participation_by_season.png",width = 650)
qplot(Season, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
dev.off
getwd()
data_list <- list(HomeGoals = en$HomeGoals, AwayGoals = en$AwayGoals,
HomeTeam = as.numeric(factor(en$HomeTeam, levels = Teams)),
AwayTeam = as.numeric(factor(en$AwayTeam, levels = Teams)),
Season = as.numeric(factor(en$Season, levels = Seasons)),
n_teams = length(Teams),
n_games = nrow(en), n_seasons = length(Seasons))
col_name <- function(name, ...) {
paste0(name, "[", paste(..., sep = ","), "]") }
# the model
m_string <- "model { for(i in 1:n_games) {
HomeGoals[i] ~ dpois(lambda_home[Season[i], HomeTeam[i],AwayTeam[i]])
AwayGoals[i] ~ dpois(lambda_away[Season[i], HomeTeam[i],AwayTeam[i]]) }
for(season_i in 1:n_seasons) {
for(home_i in 1:n_teams) {
for(away_i in 1:n_teams) {
lambda_home[season_i, home_i, away_i] <- exp( home_baseline[season_i] + skill[season_i, home_i] - skill[season_i, away_i])
lambda_away[season_i, home_i, away_i] <- exp( away_baseline[season_i] + skill[season_i, away_i] - skill[season_i, home_i]) } }
}
skill[1, 1] <- 0
for(j in 2:n_teams) { skill[1, j] ~ dnorm(group_skill, group_tau) }
group_skill ~ dnorm(0, 0.0625)
group_tau <- 1/pow(group_sigma, 2)
group_sigma ~ dunif(0, 3)
home_baseline[1] ~ dnorm(0, 0.0625)
away_baseline[1] ~ dnorm(0, 0.0625)
for(season_i in 2:n_seasons) { skill[season_i, 1] <- 0
for(j in 2:n_teams) { skill[season_i, j] ~ dnorm(skill[season_i - 1, j], season_tau) }
home_baseline[season_i] ~ dnorm(home_baseline[season_i - 1], season_tau)
away_baseline[season_i] ~ dnorm(away_baseline[season_i - 1], season_tau) }
season_tau <- 1/pow(season_sigma, 2)
season_sigma ~ dunif(0, 3) }"
m <- jags.model(textConnection(m_string), data = data_list, n.chains = 3,
n.adapt = 10000)
# update(m, 10000)
s <- coda.samples(m, variable.names = c("home_baseline", "away_baseline",
"skill", "season_sigma", "group_sigma", "group_skill"), n.iter = 10000, thin = 2)
ms <- as.matrix(s)
# skills for season 2015
team_skill <- ms[, str_detect(string = colnames(ms), "skill\\[16,")]
team_skill <- (team_skill - rowMeans(team_skill)) + ms[, "home_baseline[16]"]
team_skill <- exp(team_skill)
colnames(team_skill) <- Teams
team_skill <- team_skill[, order(colMeans(team_skill), decreasing = T)]
png("web/skills-2015.png")
par(mar = c(2, 0.7, 0.7, 0.7), xaxs = "i")
caterplot(team_skill, labels.loc = "above", val.lim = c(0.7, 3.8))
dev.off()
# predictions
n <- nrow(ms)
m_pred <- sapply(1:nrow(en), function(i) {
home_team <- which(Teams == en$HomeTeam[i])
away_team <- which(Teams == en$AwayTeam[i])
season <- which(Seasons == en$Season[i])
home_skill <- ms[, col_name("skill", season, home_team)]
away_skill <- ms[, col_name("skill", season, away_team)]
home_baseline <- ms[, col_name("home_baseline", season)]
away_baseline <- ms[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
home_goals_table <- table(home_goals)
away_goals_table <- table(away_goals)
match_results <- sign(home_goals - away_goals)
match_results_table <- table(match_results)
mode_home_goal <- as.numeric(names(home_goals_table)[ which.max(home_goals_table)])
mode_away_goal <- as.numeric(names(away_goals_table)[ which.max(away_goals_table)])
match_result <-  as.numeric(names(match_results_table)[which.max(match_results_table)])
rand_i <- sample(seq_along(home_goals), 1)
c(mode_home_goal = mode_home_goal, mode_away_goal = mode_away_goal, match_result = match_result,
mean_home_goal = mean(home_goals), mean_away_goal = mean(away_goals),
rand_home_goal = home_goals[rand_i], rand_away_goal = away_goals[rand_i],
rand_match_result = match_results[rand_i])
})
m_pred <- t(m_pred)
# how good are predicitons
mean(en$HomeGoals == m_pred[, "mode_home_goal"], na.rm = T)
mean((en$HomeGoals - m_pred[, "mean_home_goal"])^2, na.rm = T)
mean(en$Outcome == m_pred[, "match_result"], na.rm = T)
# plotting actual versus randomized predicted match results
png("web/overall_matches.png")
par(mfcol = c(2, 1), mar = rep(2.5, 4))
hist(en$Outcome, breaks = (-2:1) + 0.5, main = "Actual match results", xlab = "")
hist(m_pred[, "rand_match_result"], breaks = (-2:1) + 0.5, main = "Randomized match results", xlab = "")
dev.off()
# looking at the last available match as ifs results were unknown
n <- nrow(ms)
home_team <- which(Teams == "Stoke")
away_team <- which(Teams == "Liverpool")
season <- which(Seasons == "2015")
home_skill <- ms[, col_name("skill", season, home_team)]
away_skill <- ms[, col_name("skill", season, away_team)]
home_baseline <- ms[, col_name("home_baseline", season)]
away_baseline <- ms[, col_name("away_baseline", season)]
home_goals <- rpois(n, exp(home_baseline + home_skill - away_skill))
away_goals <- rpois(n, exp(away_baseline + away_skill - home_skill))
plot_goals <- function(home_goals, away_goals) {
n_matches <- length(home_goals)
goal_diff <- home_goals - away_goals
match_result <- ifelse(goal_diff < 0, "away_win", ifelse(goal_diff > 0, "home_win", "equal"))
hist(home_goals, xlim = c(-0.5, 10), breaks = (0:100) - 0.5, main = "Home Goals")
hist(away_goals, xlim = c(-0.5, 10), breaks = (0:100) - 0.5, main = "Away Goals")
hist(goal_diff, xlim = c(-6, 6), breaks = (-100:100) - 0.5, main = "Goal Diff")
barplot(table(match_result)/n_matches, ylim = c(0, 1), main = "Outcomes") }
# plotting the pseudo-prediction
png("web/last_match.png")
par(mfrow = c(2, 2), mar = rep(2.2, 4))
plot_goals(home_goals, away_goals)
dev.off()
# comparing with bets
1/c(Stoke = mean(home_goals > away_goals), Draw = mean(home_goals == away_goals),
Liverpool = mean(home_goals < away_goals))
# calculating payout for different goals possibilities
goals_payout <- laply(0:6, function(home_goal) {
laply(0:6, function(away_goal) {
1/mean(home_goals == home_goal & away_goals == away_goal)
})
})
colnames(goals_payout) <- paste("Liverpool", 0:6, sep = " - ")
rownames(goals_payout) <- paste("Stoke", 0:6, sep = " - ")
goals_payout <- round(goals_payout, 1)
m <- jags.model(textConnection(m_string), data = data_list, n.chains = 3,
n.adapt = 10000)
library(rjags)
install.packages("rjags")
library(rjags)
install.packages("rjags")
library(RMySQL)
library(dplyr)
library(ggplot2)
library(rjags)
library(coda)
# connection to SQL
db = dbConnect(MySQL(), user='root', password='' , dbname='Project', host='localhost')
# import data
result = dbSendQuery(db, "select * from (select th.TeamName as HomeTeam,
ta.TeamName as AwayTeam,
m.Result,
m.MatchID,
m.MatchDate,
l.Country,
msh.FullTimeGoals as HomeGoals,
msa.FullTimeGoals as AwayGoals
FROM Matches m JOIN Leagues l ON m.LeagueID = l.LeagueID
JOIN Teams th ON m.HomeTeamID = th.TeamID
JOIN Teams ta ON m.AwayTeamID = ta.TeamID
JOIN MatchStat msh ON m.MatchID = msh.MatchID AND msh.HomeAway = 'H'
JOIN MatchStat msa ON m.MatchID = msa.MatchID AND msa.HomeAway = 'A'
Where msh.FullTimeGoals is not null
and msa.FullTimeGoals is not null)
as ttt
order by ttt.MatchID;")
relations = fetch(result, n=100000000000)
# adding columns of numeric outcome and seasons
or <- na.omit(relations)
or$Outcome <- sign(or$HomeGoals - or$AwayGoals)
or$Season <- format(as.Date(or$MatchDate, "%Y-%m-%d"), format="%Y")
Countries <- unique(or$Country)
# subset England, participation by season
en <- subset(or, or$Country == Countries[3])
en <- en[order(en$Season),]
Teams <- unique(c(en$HomeTeam, en$AwayTeam))
Seasons <- unique(format(as.Date(en$MatchDate, "%Y-%m-%d"), format="%Y"))
qplot(Season, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
?qplot
plot(Season, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
Season
Seasons
qplot(Seasons, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
en
en$Season
plot(en$Season, en$HomeTeam,  ylab = "Team", xlab = "Participation by Season, en")
install.packages("rjags")
devtools::install_url("http://sourceforge.net/projects/mcmc-jags/files/rjags/3/rjags_3-2.tar.gz",
args="--configure-args='--with-jags-include=/Users/casallas/homebrew/opt/jags/include/JAGS
--with-jags-lib=/Users/casallas/homebrew/opt/jags/lib'
"
)
db = dbConnect(MySQL(), user='root', password='' , dbname='Project', host='localhost')
# import data
result = dbSendQuery(db, "select * from (select th.TeamName as HomeTeam,
ta.TeamName as AwayTeam,
m.Result,
m.MatchID,
m.MatchDate,
l.Country,
msh.FullTimeGoals as HomeGoals,
msa.FullTimeGoals as AwayGoals
FROM Matches m JOIN Leagues l ON m.LeagueID = l.LeagueID
JOIN Teams th ON m.HomeTeamID = th.TeamID
JOIN Teams ta ON m.AwayTeamID = ta.TeamID
JOIN MatchStat msh ON m.MatchID = msh.MatchID AND msh.HomeAway = 'H'
JOIN MatchStat msa ON m.MatchID = msa.MatchID AND msa.HomeAway = 'A'
Where msh.FullTimeGoals is not null
and msa.FullTimeGoals is not null)
as ttt
order by ttt.MatchID;")
relations = fetch(result, n=100000000000)
or <- na.omit(relations)
or$Outcome <- sign(or$HomeGoals - or$AwayGoals)
or$Season <- format(as.Date(or$MatchDate, "%Y-%m-%d"), format="%Y")
# separating countries
Countries <- unique(or$Country)
# subset England, participation by season
en <- subset(or, or$Country == Countries[3])
en <- en[order(en$Season),]
Teams <- unique(c(en$HomeTeam, en$AwayTeam))
Seasons <- unique(format(as.Date(en$MatchDate, "%Y-%m-%d"), format="%Y"))
png("web/participation_by_season.png")
qplot(Season, HomeTeam, data = en, ylab = "Team", xlab = "Participation by Season, en")
dev.off
dev.off
# preparing rjags
